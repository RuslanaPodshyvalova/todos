{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["getData","url","fetch","then","response","ok","json","Error","status","statusText","data","getUser","id","TodoList","state","query","type","this","props","todos","onUserIdSelected","selectedUserId","searchPhrase","toLocaleLowerCase","filteredTodosList","filter","todo","title","includes","completed","className","value","onChange","event","setState","target","map","item","key","classnames","TodoList__item","checked","readOnly","userId","button","onClick","React","Component","defaultProps","CurrentUser","user","errorMessage","a","currentUser","prevProps","clearUser","name","email","phone","App","selectUser","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"oWAGMA,G,YAAU,SAACC,GACf,OAAOC,MAAM,GAAD,OAJG,kCAIH,OAAeD,IACxBE,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,UAAaH,EAASI,OAAtB,aAAiCJ,EAASK,gBAEjDN,MAAK,SAAAC,GAAQ,OAAIA,EAASM,UAIlBC,EAAU,SAAAC,GAAE,OAAIZ,EAAQ,UAAD,OAAWY,K,gBCXlCC,G,MAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,KAAM,IAHV,4CAME,WAAU,IAAD,OACP,EAAoDC,KAAKC,MAAjDC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,iBAAkBC,EAAjC,EAAiCA,eACjC,EAAwBJ,KAAKH,MAArBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAETM,EAAeP,EAAMQ,oBAErBC,EAAoBL,EACvBM,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SACpBF,QAAO,SAAAC,GAAI,OAAIA,EAAKC,MAAMJ,oBAAoBK,SAASN,MACvDG,QAAO,SAACC,GACP,OAAQV,GACN,IAAK,SACH,OAA0B,IAAnBU,EAAKG,UACd,IAAK,YACH,OAA0B,IAAnBH,EAAKG,UACd,QACE,OAAO,MAIf,OACE,yBAAKC,UAAU,YACb,sCACA,yBAAKA,UAAU,UACb,2BACEd,KAAK,OACLe,MAAOhB,EACPiB,SAAU,SAACC,GACT,EAAKC,SAAS,CAAEnB,MAAOkB,EAAME,OAAOJ,WAGxC,4BACEnB,GAAG,SACHkB,UAAU,eACVC,MAAOf,EACPgB,SAAU,SAACC,GACT,EAAKC,SAAS,CAAElB,KAAMiB,EAAME,OAAOJ,UAGrC,2DApCY,CAAC,MAAO,SAAU,aAqCjBK,KAAI,SAAAC,GAAI,OACnB,4BACEC,IAAKD,EACLN,MAAOM,GAENA,QAMT,yBAAKP,UAAU,4BACb,wBAAIA,UAAU,kBACXN,EAAkBY,KAAI,SAAAV,GAAI,OACzB,wBACEY,IAAKZ,EAAKd,GACVkB,UAAWS,IAAW,CACpBC,gBAAgB,EAChB,0BAA2Bd,EAAKG,UAChC,6BAA8BH,EAAKG,aAGrC,+BACE,2BAAOb,KAAK,WAAWyB,QAASf,EAAKG,UAAWa,UAAQ,IACxD,2BAAIhB,EAAKC,QAGVD,EAAKiB,QACJ,4BACE3B,KAAK,SACLc,UAAWS,IAAW,CACpBK,QAAQ,EACR,yBAAyB,EACzB,kCACEvB,IAAmBK,EAAKiB,SAE5BE,QAAS,WACPzB,EAAiBM,EAAKiB,UAT1B,WAaGjB,EAAKiB,mBAvF1B,GAA8BG,IAAMC,YA+GpClC,EAASmC,aAAe,CACtB7B,MAAO,GACPE,eAAgB,G,UCjHL4B,EAAb,4MACEnC,MAAQ,CACNoC,KAAM,KACNC,aAAc,IAHlB,EAwBExC,QAxBF,uCAwBY,WAAMC,GAAN,eAAAwC,EAAA,+EAEoBzC,EAAQC,GAF5B,OAEAyC,EAFA,OAIN,EAAKnB,SAAS,CAAEgB,KAAMG,IAJhB,gDAMN,EAAKnB,SAAS,CAAEiB,aAAa,EAAD,KANtB,yDAxBZ,6GAME,WACE,IAAQR,EAAW1B,KAAKC,MAAhByB,OAEJA,EAAS,GACX1B,KAAKN,QAAQgC,KAVnB,gCAcE,SAAmBW,GACjB,IAAQX,EAAW1B,KAAKC,MAAhByB,OAEJW,EAAUX,SAAWA,GAIzB1B,KAAKN,QAAQgC,KArBjB,oBAkCE,WACE,MAA+B1B,KAAKH,MAA5BoC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aACd,EAA8BlC,KAAKC,MAA3ByB,EAAR,EAAQA,OAAQY,EAAhB,EAAgBA,UAEhB,OAAKL,EAKH,yBAAKpB,UAAU,eACb,wBAAIA,UAAU,sBACVqB,EAMA,uBAAGrB,UAAU,SAASqB,GANPD,GACf,+CAEGP,IAOP,wBAAIb,UAAU,qBAAqBoB,EAAKM,MACxC,uBAAG1B,UAAU,sBAAsBoB,EAAKO,OACxC,uBAAG3B,UAAU,sBAAsBoB,EAAKQ,OACxC,4BACE1C,KAAK,SACLc,UAAU,4BACVe,QAAS,kBAAMU,MAHjB,UAnBK,SAvCb,GAAiCT,IAAMC,WA2EvCE,EAAYD,aAAe,CACzBL,OAAQ,G,IChBKgB,E,4MAzDb7C,MAAQ,CACNK,MAAO,GACPE,eAAgB,EAChB8B,aAAc,I,EAahBS,WAAa,SAAChD,GACZ,EAAKsB,SAAS,CAAEb,eAAgBT,K,EAGlC2C,UAAY,WACV,EAAKrB,SAAS,CAAEb,eAAgB,K,8FAflC,4BAAA+B,EAAA,+EHC4BpD,EAAQ,UGDpC,OAEU6D,EAFV,OAII5C,KAAKiB,SAAS,CAAEf,MAAO0C,IAJ3B,gDAMI5C,KAAKiB,SAAS,CAAEiB,aAAa,qBANjC,yD,0EAkBA,WACE,MAAgDlC,KAAKH,MAA7CK,EAAR,EAAQA,MAAOE,EAAf,EAAeA,eAAgB8B,EAA/B,EAA+BA,aAE/B,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,gBACXqB,EAOA,uBAAGrB,UAAU,SAASqB,GAPPhC,GACf,kBAAC,EAAD,CACEA,MAAOA,EACPE,eAAgBA,EAChBD,iBAAkBH,KAAK2C,cAQ7B,yBAAK9B,UAAU,gBACb,yBAAKA,UAAU,0BACZT,EACC,kBAAC,EAAD,CACEsB,OAAQtB,EACRkC,UAAWtC,KAAKsC,YAEhB,0B,GAlDET,IAAMC,WCHxBe,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.081f1579.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\n// eslint-disable-next-line\nconst getData = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.status}: ${response.statusText}`);\n    })\n    .then(response => response.data);\n};\n\nexport const getTodos = () => getData('/todos');\nexport const getUser = id => getData(`/users/${id}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    type: '',\n  }\n\n  render() {\n    const { todos, onUserIdSelected, selectedUserId } = this.props;\n    const { query, type } = this.state;\n    const typeOptions = ['all', 'active', 'completed'];\n    const searchPhrase = query.toLocaleLowerCase();\n\n    const filteredTodosList = todos\n      .filter(todo => todo.title)\n      .filter(todo => todo.title.toLocaleLowerCase().includes(searchPhrase))\n      .filter((todo) => {\n        switch (type) {\n          case 'active':\n            return todo.completed !== true;\n          case 'completed':\n            return todo.completed === true;\n          default:\n            return true;\n        }\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"filter\">\n          <input\n            type=\"text\"\n            value={query}\n            onChange={(event) => {\n              this.setState({ query: event.target.value });\n            }}\n          />\n          <select\n            id=\"status\"\n            className=\"filter-field\"\n            value={type}\n            onChange={(event) => {\n              this.setState({ type: event.target.value });\n            }}\n          >\n            <option>select status for todos</option>\n            {typeOptions.map(item => (\n              <option\n                key={item}\n                value={item}\n              >\n                {item}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodosList.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames({\n                  TodoList__item: true,\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                {todo.userId && (\n                  <button\n                    type=\"button\"\n                    className={classnames({\n                      button: true,\n                      'TodoList__user-button': true,\n                      'TodoList__user-button--selected':\n                        selectedUserId === todo.userId,\n                    })}\n                    onClick={() => {\n                      onUserIdSelected(todo.userId);\n                    }}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                )}\n              </li>\n\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })),\n  onUserIdSelected: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  selectedUserId: 0,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n    errorMessage: '',\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    if (userId > 0) {\n      this.getUser(userId);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId === userId) {\n      return;\n    }\n\n    this.getUser(userId);\n  }\n\n  getUser = async(id) => {\n    try {\n      const currentUser = await getUser(id);\n\n      this.setState({ user: currentUser });\n    } catch (error) {\n      this.setState({ errorMessage: error });\n    }\n  }\n\n  render() {\n    const { user, errorMessage } = this.state;\n    const { userId, clearUser } = this.props;\n\n    if (!user) {\n      return null;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          {!errorMessage ? user && (\n            <span>\n              Selected user:\n              {userId}\n            </span>\n          ) : (\n            <p className=\"error\">{errorMessage}</p>\n          )}\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"button CurrentUser__clear\"\n          onClick={() => clearUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number,\n  clearUser: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  userId: 0,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    errorMessage: '',\n  };\n\n  async componentDidMount() {\n    try {\n      const todosFromServer = await getTodos();\n\n      this.setState({ todos: todosFromServer });\n    } catch (error) {\n      this.setState({ errorMessage: `Can't load todos` });\n    }\n  }\n\n  selectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!errorMessage ? todos && (\n            <TodoList\n              todos={todos}\n              selectedUserId={selectedUserId}\n              onUserIdSelected={this.selectUser}\n            />\n          ) : (\n            <p className=\"error\">{errorMessage}</p>\n          )}\n\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}